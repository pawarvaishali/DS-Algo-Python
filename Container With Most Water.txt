Container With Most Water

Given n non-negative integers a1, a2, ..., an , where each represents a point at coordinate (i, ai). n vertical lines are drawn such that the two endpoints of the line i is at (i, ai) and (i, 0). Find two lines, which, together with the x-axis forms a container, such that the container contains the most water.

Notice that you may not slant the container.

 

Example 1:


Input: height = [1,8,6,2,5,4,8,3,7]
Output: 49
Explanation: The above vertical lines are represented by array [1,8,6,2,5,4,8,3,7]. In this case, the max area of water (blue section) the container can contain is 49.
Example 2:

Input: height = [1,1]
Output: 1
Example 3:

Input: height = [4,3,2,1,4]
Output: 16
Example 4:

Input: height = [1,2,1]
Output: 2
 

Constraints:

2 <= height.length <= 3 * 104
0 <= height[i] <= 3 * 104




class Solution:
    def maxArea(self, h: List[int]) -> int:
        if len(h) <= 1:
            return 0
        if len(h) == 2:
            return min(h)
        
        l = 0
        r = len(h) - 1
        maxCap = 0
        
        while l<r:
            maxCap = max(maxCap, min(h[l], h[r]) * (r-l))
            if h[l] < h[r]:
                l += 1
            else:
                r -= 1
                
	# Brute force :
        # maxCap = 0
        # for i in range(len(h)-1):
        #     for j in range(len(h)-1, i, -1):
        #         cap = min(h[i], h[j]) * (j-i)
        #         if cap > maxCap:
        #             maxCap = cap
                
        return maxCap
            
            