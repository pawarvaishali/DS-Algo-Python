Minimum Length Substrings
You are given two strings s and t. You can select any substring of string s and rearrange the characters of the selected substring. Determine the minimum length of the substring of s such that string t is a substring of the selected substring.
Signature
int minLengthSubstring(String s, String t)
Input
s and t are non-empty strings that contain less than 1,000,000 characters each
Output
Return the minimum length of the substring of s. If it is not possible, return -1
Example
s = "dcbefebce"
t = "fd"'
output = 5
Explanation:
Substring "dcbef" can be rearranged to "cfdeb", "cefdb", and so on. String t is a substring of "cfdeb". Thus, the minimum length required is 5.



class Solution:
  def minWindow(self, s: str, t: str) -> str:
    Tmap = Counter(t)
    matchMap = Counter()

    if len(s) < len(t):
        return ""

    start, end = 0, 0
    minStr = []
    minLen = float('inf')

    while start <= end <= len(s):
        if not Tmap - matchMap:
            if minLen >= (end - start):
                minStr = list(s[start:end])
                minLen = len(minStr)
            matchMap.subtract(s[start])
            start += 1
        else:
            if end < len(s):
                matchMap.update(s[end])
            end += 1

    return ''.join(minStr) 