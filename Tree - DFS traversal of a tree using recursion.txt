Depth First Traversals of this Tree

      1
    /   \
   2     3
 /   \
4     5


Therefore, the Depth First Traversals of this Tree will be:
(a) Inorder   (Left, Root, Right) : 4 2 5 1 3
(b) Preorder  (Root, Left, Right) : 1 2 4 5 3
(c) Postorder (Left, Right, Root) : 4 5 2 3 1


# Python program to for tree traversals 
  
# A class that represents an individual node in a 
# Binary Tree 
class Node: 
    def __init__(self,key): 
        self.left = None
        self.right = None
        self.val = key 
  
# A function to do inorder tree traversal 
def printInorder(root):   
    if root: 
        printInorder(root.left) 
        print(root.val)
        printInorder(root.right)   
  
# A function to do postorder tree traversal 
def printPostorder(root):   
    if root: 
        printPostorder(root.left) 
        printPostorder(root.right) 
        print(root.val), 
  
  
# A function to do preorder tree traversal 
def printPreorder(root):   
    if root:   
        print(root.val), 
        printPreorder(root.left) 
        printPreorder(root.right) 
  
# Driver code 
root = Node(1) 
root.left      = Node(2) 
root.right     = Node(3) 
root.left.left  = Node(4) 
root.left.right  = Node(5) 
print "Preorder traversal of binary tree is"
printPreorder(root) 
  
print "\nInorder traversal of binary tree is"
printInorder(root) 
  
print "\nPostorder traversal of binary tree is"
printPostorder(root) 

Output:
Preorder traversal of binary tree is
1 2 4 5 3 
Inorder traversal of binary tree is
4 2 5 1 3 
Postorder traversal of binary tree is
4 5 2 3 1
Time Complexity: O(n)
Auxiliary Space : If we don’t consider size of stack for function calls then O(1) otherwise O(n).