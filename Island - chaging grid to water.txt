Number of Islands

Solution
Given an m x n 2d grid map of '1's (land) and '0's (water), return the number of islands.

An island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically. You may assume all four edges of the grid are all surrounded by water.

 

Example 1:

Input: grid = [
  ["1","1","1","1","0"],
  ["1","1","0","1","0"],
  ["1","1","0","0","0"],
  ["0","0","0","0","0"]
]
Output: 1
Example 2:

Input: grid = [
  ["1","1","0","0","0"],
  ["1","1","0","0","0"],
  ["0","0","1","0","0"],
  ["0","0","0","1","1"]
]
Output: 3
 

Constraints:

m == grid.length
n == grid[i].length
1 <= m, n <= 300
grid[i][j] is '0' or '1'.


class Solution:
    def numIslands(self, grid: List[List[str]]) -> int:   
        if len(grid) == 0:
            return 0     

        n = len(grid)
        m = len(grid[0])
        island = 0
        
        for i in range(n):
            for j in range(m):
                if grid[i][j] == '1':
                    island += 1
                    
                self.makewater(i, j, n, m, grid)
        return island
                    
    def makewater(self, i, j, n, m, grid):
        if i < 0 or j < 0 or i >= n or j >= m:
            return 
        if grid[i][j] == '0':
            return
        
        grid[i][j] = '0'
                
      	# includes diagonal beighbor too
      	#rowNbr = [-1, -1, -1, 0, 0, 1, 1, 1]
      	#colNbr = [-1, 0, 1, -1, 1, -1, 0, 1]
      
      	# excluding diagona neighbor      
        rownbr = [1, -1, 0 ,0]
        colnbr = [0, 0, 1, -1]
        
        for nbr in range(len(rownbr)):
            self.makewater(i+rownbr[nbr], j+colnbr[nbr], n, m, grid)