Binary Tree Zigzag Level Order Traversal

Solution
Given a binary tree, return the zigzag level order traversal of its nodes' values. (ie, from left to right, then right to left for the next level and alternate between).

For example:
Given binary tree [3,9,20,null,null,15,7],
    3
   / \
  9  20
    /  \
   15   7
return its zigzag level order traversal as:
[
  [3],
  [20,9],
  [15,7]
]




# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def zigzagLevelOrder(self, root: TreeNode) -> List[List[int]]:
        if not root:
            return None
        temp = root
        q = []
        q.append(temp)
        nodes = []
        ltr = True
        
        while q:
            cnt = len(q)
            q.reverse()
            nodes.append([])
            
            while cnt:
                temp = q.pop(0)
                nodes[-1].append(temp.val)
                
                if ltr:
                    if temp.left:
                        q.append(temp.left)
                    if temp.right:
                        q.append(temp.right)
                else:
                    if temp.right:
                        q.append(temp.right)
                    if temp.left:
                        q.append(temp.left)
                    
                cnt -= 1
            ltr = not ltr
                
        return nodes