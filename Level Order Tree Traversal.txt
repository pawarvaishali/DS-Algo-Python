Level order traversal of a tree is breadth first traversal for the tree.

    1
   /  \
  2    3
 /  \
4   5


Level order traversal of the above tree is 1 2 3 4 5



# Python program to print level order traversal using Queue  
  
from collections import deque  
  
# A node structure  
class Node:  
      
    # A utility function to create a new node  
    def __init__(self ,key):  
        self.data = key  
        self.left = None
        self.right = None
  
# Iterative Method to print the height of a binary tree  
def printLevelOrder(root):  
      
    # Base Case  
    if root is None:  
        return
      
    # Create an empty queue for level order traversal  
    queue = deque() 
  
    # Enqueue Root and initialize height  
    queue.append(root)  
  
    while(len(queue) > 0):  
        # Print front of queue and remove it from queue  
        node = queue.popleft()  
        print (node.data) 
          
        #Enqueue left child  
        if node.left is not None:  
            queue.append(node.left)  
  
        # Enqueue right child  
        if node.right is not None:  
            queue.append(node.right)  
  
#Driver Program to test above function  
root = Node(1)  
root.left = Node(2)  
root.right = Node(3)  
root.left.left = Node(4)  
root.left.right = Node(5)  
  
print ("Level Order Traversal of binary tree is -")  
printLevelOrder(root)  
  
# This code is contributed by Nikhil Kumar Singh(nickzuck_007)  

Output:
Level order traversal of binary tree is - 
1 2 3 4 5 
Time Complexity: O(n) where n is number of nodes in the binary tree
Space Complexity: O(n) where n is number of nodes in the binary tree